package ru.unithack.bot.service;

import com.pengrad.telegrambot.TelegramBot;
import com.pengrad.telegrambot.request.SendMessage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.unithack.bot.domain.model.User;
import ru.unithack.bot.domain.model.Workshop;
import ru.unithack.bot.domain.model.WorkshopRegistration;
import ru.unithack.bot.infrastructure.repository.WorkshopRepository;
import ru.unithack.bot.infrastructure.repository.WorkshopRegistrationRepository;

import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
public class NotificationService {
    
    private static final Logger logger = LoggerFactory.getLogger(NotificationService.class);
    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
    
    @Value("${app.telegram-token}")
    private String telegramToken;
    
    private TelegramBot telegramBot;
    private final WorkshopRepository workshopRepository;
    private final WorkshopRegistrationRepository registrationRepository;
    
    @Autowired
    public NotificationService(WorkshopRepository workshopRepository,
                              WorkshopRegistrationRepository registrationRepository,
                              @Value("${app.telegram-token}") String telegramToken) {
        this.workshopRepository = workshopRepository;
        this.registrationRepository = registrationRepository;
        this.telegramToken = telegramToken;
        this.telegramBot = new TelegramBot(telegramToken);
        logger.info("NotificationService initialized with Telegram token");
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ chatId
     */
    public void sendMessageToUser(Long chatId, String message) {
        try {
            // Ensure telegramBot is initialized
            if (telegramBot == null) {
                telegramBot = new TelegramBot(telegramToken);
                logger.info("Re-initialized telegramBot in sendMessageToUser");
            }
            
            // Log the message being sent
            logger.info("Sending message to chatId {}: {}", chatId, message.substring(0, Math.min(50, message.length())) + "...");
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑ parseMode –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –∫–∞–∫ –≤ TelegramBotService
            telegramBot.execute(new SendMessage(chatId, message));
            logger.info("Message sent successfully to chatId {}", chatId);
        } catch (Exception e) {
            logger.error("Error sending message to chatId {}: {}", chatId, e.getMessage(), e);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–∑–∏—Ü–∏–∏
     */
    public void sendWaitlistNotification(WorkshopRegistration registration) {
        User user = registration.getUser();
        Workshop workshop = registration.getWorkshop();
        Integer position = registration.getWaitlistPosition();
        
        if (user.getUserInfo() != null && user.getUserInfo().getChatId() != null && position != null) {
            String message = String.format(
                "‚è≥ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:\n" +
                "üìå %s\n" +
                "üïí %s\n\n" +
                "–í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: %d\n\n" +
                "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ.",
                workshop.getTitle(),
                workshop.getStartTime().format(DATE_TIME_FORMATTER),
                position
            );
            
            sendMessageToUser(user.getUserInfo().getChatId(), message);
            logger.info("Sent waitlist notification to user {}, position {}", user.getId(), position);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è
     */
    public void sendConfirmationRequestToAll(WorkshopRegistration registration, int totalWaitingUsers) {
        User user = registration.getUser();
        Workshop workshop = registration.getWorkshop();
        LocalDateTime deadline = registration.getConfirmationDeadline();
        
        if (user.getUserInfo() != null && user.getUserInfo().getChatId() != null && deadline != null) {
            String message = String.format(
                "üéâ –ü–æ—è–≤–∏–ª–æ—Å—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ!\n\n" +
                "–ù–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ –æ—Å–≤–æ–±–æ–¥–∏–ª–æ—Å—å –º–µ—Å—Ç–æ. –í—ã –∏ –µ—â—ë %d —á–µ–ª–æ–≤–µ–∫(–∞) –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—É—á–∏–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n" +
                "üìå %s\n" +
                "üïí %s\n\n" +
                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ú–µ—Å—Ç–æ –ø–æ–ª—É—á–∏—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —É—á–∞—Å—Ç–∏–µ.\n\n" +
                "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n" +
                "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\n" +
                "/confirm_workshop %d\n\n" +
                "–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –¥–æ %s –∏–ª–∏ –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –±—ã—Å—Ç—Ä–µ–µ –≤–∞—Å, –≤—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è.",
                totalWaitingUsers - 1,
                workshop.getTitle(),
                workshop.getStartTime().format(DATE_TIME_FORMATTER),
                workshop.getId(),
                deadline.format(DATE_TIME_FORMATTER)
            );
            
            sendMessageToUser(user.getUserInfo().getChatId(), message);
            logger.info("Sent confirmation request to all waitlisted users, including user {} for workshop {}", 
                user.getId(), workshop.getId());
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
     */
    public void sendSpotTakenNotification(WorkshopRegistration registration) {
        User user = registration.getUser();
        Workshop workshop = registration.getWorkshop();
        
        if (user.getUserInfo() != null && user.getUserInfo().getChatId() != null) {
            String message = String.format(
                "‚è± –ú–µ—Å—Ç–æ —É–∂–µ –∑–∞–Ω—è—Ç–æ\n\n" +
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥—Ä—É–≥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ —Ä–∞–Ω—å—à–µ –≤–∞—Å:\n" +
                "üìå %s\n" +
                "üïí %s\n\n" +
                "–í—ã –æ—Å—Ç–∞—ë—Ç–µ—Å—å –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤–æ–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ.",
                workshop.getTitle(),
                workshop.getStartTime().format(DATE_TIME_FORMATTER)
            );
            
            sendMessageToUser(user.getUserInfo().getChatId(), message);
            logger.info("Sent spot taken notification to user {} for workshop {}", 
                user.getId(), workshop.getId());
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Å—Ä–æ–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è
     */
    public void sendConfirmationExpiredNotification(WorkshopRegistration registration) {
        User user = registration.getUser();
        Workshop workshop = registration.getWorkshop();
        
        if (user.getUserInfo() != null && user.getUserInfo().getChatId() != null) {
            String message = String.format(
                "‚åõ –°—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫\n\n" +
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç:\n" +
                "üìå %s\n" +
                "üïí %s\n\n" +
                "–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è. –ï—Å–ª–∏ –≤—ã –≤—Å—ë –µ—â—ë —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, " +
                "–≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–Ω–æ–≤–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π:\n\n" +
                "/register_workshop %d",
                workshop.getTitle(),
                workshop.getStartTime().format(DATE_TIME_FORMATTER),
                workshop.getId()
            );
            
            sendMessageToUser(user.getUserInfo().getChatId(), message);
            logger.info("Sent confirmation expired notification to user {} for workshop {}", 
                user.getId(), workshop.getId());
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
     */
    public void sendRegistrationConfirmedNotification(WorkshopRegistration registration) {
        User user = registration.getUser();
        Workshop workshop = registration.getWorkshop();
        
        if (user.getUserInfo() != null && user.getUserInfo().getChatId() != null) {
            String message = String.format(
                "‚úÖ –£—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n" +
                "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ:\n" +
                "üìå %s\n" +
                "üïí %s\n\n" +
                "–ñ–¥–µ–º –≤–∞—Å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏!",
                workshop.getTitle(),
                workshop.getStartTime().format(DATE_TIME_FORMATTER)
            );
            
            sendMessageToUser(user.getUserInfo().getChatId(), message);
            logger.info("Sent registration confirmed notification to user {} for workshop {}", 
                user.getId(), workshop.getId());
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –æ–∂–∏–¥–∞—é—â–∏–º
     */
    public void sendWorkshopUpdatedNotification(Workshop workshop, List<WorkshopRegistration> allParticipants) {
        for (WorkshopRegistration registration : allParticipants) {
            User user = registration.getUser();
            if (user.getUserInfo() != null && user.getUserInfo().getChatId() != null) {
                String waitlistInfo = registration.isWaitlist() ? 
                    String.format(" (–≤—ã –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è, –ø–æ–∑–∏—Ü–∏—è: %d)", 
                        registration.getWaitlistPosition() != null ? registration.getWaitlistPosition() : 0) : 
                    "";
                
                String message = String.format(
                    "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ\n\n" +
                    "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã%s, –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω:\n\n" +
                    "üìå %s\n" +
                    "üïí %s - %s\n" +
                    "üìÑ %s\n\n" +
                    "–í—ã –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n" +
                    "/cancel_workshop %d",
                    waitlistInfo,
                    workshop.getTitle(),
                    workshop.getStartTime().format(DATE_TIME_FORMATTER),
                    workshop.getEndTime().format(DATE_TIME_FORMATTER),
                    workshop.getDescription(),
                    workshop.getId()
                );
                
                sendMessageToUser(user.getUserInfo().getChatId(), message);
                logger.info("Sent workshop update notification to user {} for workshop {}", 
                    user.getId(), workshop.getId());
            }
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –æ–∂–∏–¥–∞—é—â–∏–º
     */
    public void sendWorkshopDeletedNotification(Workshop workshop, List<WorkshopRegistration> allParticipants) {
        for (WorkshopRegistration registration : allParticipants) {
            User user = registration.getUser();
            if (user.getUserInfo() != null && user.getUserInfo().getChatId() != null) {
                String waitlistInfo = registration.isWaitlist() ? 
                    " (–≤—ã –±—ã–ª–∏ –≤ –ª–∏—Å—Ç–µ –æ–∂–∏–¥–∞–Ω–∏—è)" : "";
                
                String message = String.format(
                    "‚ùå –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –æ—Ç–º–µ–Ω–µ–Ω\n\n" +
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã%s, –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω:\n\n" +
                    "üìå %s\n" +
                    "üïí %s\n\n" +
                    "–í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–∞.",
                    waitlistInfo,
                    workshop.getTitle(),
                    workshop.getStartTime().format(DATE_TIME_FORMATTER)
                );
                
                sendMessageToUser(user.getUserInfo().getChatId(), message);
                logger.info("Sent workshop deletion notification to user {} for workshop {}", 
                    user.getId(), workshop.getId());
            }
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
     */
    public void sendWorkshopReminder(Workshop workshop, List<WorkshopRegistration> participants) {
        for (WorkshopRegistration registration : participants) {
            if (registration.getUser().getUserInfo() != null && 
                registration.getUser().getUserInfo().getChatId() != null) {
                
                Long chatId = registration.getUser().getUserInfo().getChatId();
                String message = String.format(
                    "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ\n\n" +
                    "–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è:\n" +
                    "üìå %s\n" +
                    "üïí %s\n" +
                    "üìù %s\n\n" +
                    "–ñ–¥–µ–º –≤–∞—Å!",
                    workshop.getTitle(),
                    workshop.getStartTime().format(DATE_TIME_FORMATTER),
                    workshop.getDescription()
                );
                
                sendMessageToUser(chatId, message);
                logger.info("Sent workshop reminder to user {} for workshop {}", 
                           registration.getUser().getId(), workshop.getId());
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–∫–∞–∂–¥—ã–π —á–∞—Å)
     */
    @Scheduled(fixedRate = 3600000) // –ö–∞–∂–¥—ã–π —á–∞—Å (3600000 –º—Å)
    @Transactional(readOnly = true)
    public void sendScheduledReminders() {
        logger.info("Running scheduled workshop reminders check");
        
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime oneDayFromNow = now.plusDays(1);
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö 24 —á–∞—Å–æ–≤
        List<Workshop> upcomingWorkshops = workshopRepository.findByActiveTrueAndStartTimeBetween(
            now, oneDayFromNow);
        
        for (Workshop workshop : upcomingWorkshops) {
            List<WorkshopRegistration> participants = 
                registrationRepository.findByWorkshopAndWaitlistFalseOrderByRegistrationTimeAsc(workshop);
            
            Duration timeUntilStart = Duration.between(now, workshop.getStartTime());
            long hoursUntilStart = timeUntilStart.toHours();
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞
            if (hoursUntilStart <= 24 && hoursUntilStart >= 23) {
                sendDayBeforeReminder(workshop, participants);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞
            if (hoursUntilStart <= 1 && timeUntilStart.toMinutes() >= 55) {
                sendWorkshopReminder(workshop, participants);
            }
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
     */
    private void sendDayBeforeReminder(Workshop workshop, List<WorkshopRegistration> participants) {
        for (WorkshopRegistration registration : participants) {
            if (registration.getUser().getUserInfo() != null && 
                registration.getUser().getUserInfo().getChatId() != null) {
                
                Long chatId = registration.getUser().getUserInfo().getChatId();
                String message = String.format(
                    "üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ –∑–∞–≤—Ç—Ä–∞\n\n" +
                    "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:\n" +
                    "üìå %s\n" +
                    "üïí %s\n" +
                    "üìù %s\n\n" +
                    "–ï—Å–ª–∏ —É –≤–∞—Å –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ø–ª–∞–Ω—ã, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π:\n" +
                    "/cancel_workshop %d",
                    workshop.getTitle(),
                    workshop.getStartTime().format(DATE_TIME_FORMATTER),
                    workshop.getDescription(),
                    workshop.getId()
                );
                
                sendMessageToUser(chatId, message);
                logger.info("Sent day-before reminder to user {} for workshop {}", 
                           registration.getUser().getId(), workshop.getId());
            }
        }
    }
} 