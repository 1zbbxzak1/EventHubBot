package ru.unithack.bot.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import ru.unithack.bot.domain.model.NewsPost;
import ru.unithack.bot.domain.model.User;
import ru.unithack.bot.domain.model.Workshop;
import ru.unithack.bot.domain.model.WorkshopRegistration;
import ru.unithack.bot.infrastructure.repository.NewsPostRepository;
import ru.unithack.bot.infrastructure.repository.WorkshopRegistrationRepository;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class NewsService {

    private static final Logger logger = LoggerFactory.getLogger(NewsService.class);
    private static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    @Value("${app.uploads.news-images:/uploads/news}")
    private String newsImagesUploadPath;

    private final NewsPostRepository newsPostRepository;
    private final WorkshopRegistrationRepository workshopRegistrationRepository;
    private final NotificationService notificationService;

    @Autowired
    public NewsService(NewsPostRepository newsPostRepository,
                       WorkshopRegistrationRepository workshopRegistrationRepository,
                       NotificationService notificationService) {
        this.newsPostRepository = newsPostRepository;
        this.workshopRegistrationRepository = workshopRegistrationRepository;
        this.notificationService = notificationService;
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
     */
    public String saveImage(byte[] imageData, String originalFileName) throws IOException {
        // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        String fileExtension = getFileExtension(originalFileName);
        String uniqueFileName = UUID.randomUUID().toString() + fileExtension;
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        Path uploadPath = Paths.get(newsImagesUploadPath);
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        Path filePath = uploadPath.resolve(uniqueFileName);
        Files.write(filePath, imageData);
        
        return filePath.toString();
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –µ–≥–æ –∏–º–µ–Ω–∏
     */
    private String getFileExtension(String fileName) {
        int lastIndexOf = fileName.lastIndexOf(".");
        if (lastIndexOf == -1) {
            return ""; // –ù–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        }
        return fileName.substring(lastIndexOf);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @Transactional
    public NewsPost createGlobalNews(String title, String content, String imagePath, User author) {
        NewsPost newsPost = new NewsPost();
        newsPost.setTitle(title);
        newsPost.setContent(content);
        newsPost.setImagePath(imagePath);
        newsPost.setGlobal(true);
        newsPost.setCreatedBy(author);
        newsPost.setCreatedAt(LocalDateTime.now());
        
        return newsPostRepository.save(newsPost);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
     */
    @Transactional
    public NewsPost createWorkshopNews(String title, String content, String imagePath, 
                                     Workshop workshop, User author) {
        NewsPost newsPost = new NewsPost();
        newsPost.setTitle(title);
        newsPost.setContent(content);
        newsPost.setImagePath(imagePath);
        newsPost.setGlobal(false);
        newsPost.setWorkshop(workshop);
        newsPost.setCreatedBy(author);
        newsPost.setCreatedAt(LocalDateTime.now());
        
        return newsPostRepository.save(newsPost);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
     */
    @Transactional(readOnly = true)
    public void notifyAllUsersAboutGlobalNews(NewsPost newsPost) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        String message = formatNewsMessage(newsPost);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —á–∞—Ç-–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
        List<Long> allUserChatIds = workshopRegistrationRepository.findAllUserChatIds();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for (Long chatId : allUserChatIds) {
            if (chatId != null) {
                notificationService.sendMessageToUser(chatId, message);
            }
        }
        
        logger.info("Sent global news notification to {} users", allUserChatIds.size());
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
     */
    @Transactional(readOnly = true)
    public void notifyWorkshopParticipantsAboutNews(NewsPost newsPost) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        String message = formatNewsMessage(newsPost);
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
        List<WorkshopRegistration> participants = workshopRegistrationRepository
                .findConfirmedByWorkshopId(newsPost.getWorkshop().getId());
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for (WorkshopRegistration registration : participants) {
            User user = registration.getUser();
            if (user.getUserInfo() != null && user.getUserInfo().getChatId() != null) {
                notificationService.sendMessageToUser(user.getUserInfo().getChatId(), message);
            }
        }
        
        logger.info("Sent workshop news notification about workshop {} to {} participants", 
                newsPost.getWorkshop().getId(), participants.size());
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏
     */
    private String formatNewsMessage(NewsPost newsPost) {
        StringBuilder message = new StringBuilder();
        
        message.append("üì¢ *").append(newsPost.getTitle()).append("*\n\n");
        message.append(newsPost.getContent()).append("\n\n");
        
        if (!newsPost.isGlobal() && newsPost.getWorkshop() != null) {
            message.append("üîπ –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: ").append(newsPost.getWorkshop().getTitle()).append("\n");
        }
        
        message.append("üïí ").append(newsPost.getCreatedAt().format(DATE_TIME_FORMATTER));
        
        return message.toString();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç—å –ø–æ ID
     */
    @Transactional(readOnly = true)
    public Optional<NewsPost> getNewsById(Long newsId) {
        return newsPostRepository.findById(newsId);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
     */
    @Transactional(readOnly = true)
    public List<NewsPost> getAllGlobalNews() {
        return newsPostRepository.findByIsGlobalTrueOrderByCreatedAtDesc();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
     */
    @Transactional(readOnly = true)
    public List<NewsPost> getWorkshopNews(Workshop workshop) {
        return newsPostRepository.findByWorkshopOrderByCreatedAtDesc(workshop);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * (–≥–ª–æ–±–∞–ª—å–Ω—ã–µ + –Ω–æ–≤–æ—Å—Ç–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –∑–∞–ø–∏—Å–∞–Ω)
     */
    @Transactional
    public List<NewsPost> getRelevantNewsForUser(User user) {
        return newsPostRepository.findAllRelevantForUser(user);
    }
} 